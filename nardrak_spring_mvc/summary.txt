    
==================================================================
1. 프로젝트 생성 : NEW > Spring Legacy Project > 
   프로젝트명 입력 > nardrak_spring_mvc 선택 
   > 패키지명(3레벨이상) 입력 : com.spring.nardrak_mvc
  
   [HomeController.java 실행]
   => url 경로 => http://localhost/

------------------------------------------------------------------
1-1) Properties 설정   
     - project 우클릭 > properties > Project Facets > java를 11로 변경
       Runtimes 탭에서 Apache Tomcat v9.0 클릭 > Apply 버튼
   
     - project 우클릭 > properties > Java Build Path > Library 탭 
       > jre System library 선택후 Edit 선택/또는 jre System library 더블클릭
       > 세번째 workspace default JRE(jre1.11.0_xxx) 선택
   
     - java compiler - 11버전 확인
   
   [Apply AND Close] 클릭


------------------------------------------------------------------

1-2-1) pom.xml에 버전 반영
	<properties>
		<java-version>11</java-version>
		<org.springframework-version>5.1.8.RELEASE</org.springframework-version>      
	</properties>
		
		
1-2-2) pom.xml에 라이브러리 반영
		
		<!-- jdbc 설정 pom.xml에 추가  -->
		<dependency> 
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc6</artifactId> 
			<version>11.2.0.4</version> 
		</dependency>
		
		<dependency> 
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
	

------------------------------------------------------------------

1-3) context.xml에 커넥션풀 추가 
    <!-- nardrak_spring_mvc 계정 연동 : 1.225.126.54 (외부 호스트) -->
    <Resource author="Container" 
	    driverClassName="oracle.jdbc.driver.OracleDriver" 
	    name="jdbc/nardrak_spring_mvc" 
	    username="nardrak_spring_mvc" 
	    password="tiger" 
	    type="javax.sql.DataSource" 
	    url="jdbc:oracle:thin:@1.225.126.54:1521:xe" 
	    maxActive="7" 
	    maxWait="1000"/>

==================================================================
2. 패키지 생성
   com.spring.nardrak_mvc.controller
   com.spring.nardrak_mvc.service
   com.spring.nardrak_mvc.dao
   com.spring.nardrak_mvc.dto

==================================================================
3. web.xml 맨 아래에 한글 안깨지도록 추가

	<!-- encoding 설정 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		
		<init-param>
		   <param-name>encoding</param-name>
		   <param-value>UTF-8</param-value>
		</init-param>   
		
		<init-param>
		   <param-name>forceEncoding</param-name>
		   <param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
   
==================================================================
4. pom.xml에 Mybatis.jar 파일 설정
   
   mvnrepository.com에서 4개의 라이브러리를 검색해서 복사후 pom.xml에 등록하면
   maven 중앙 repository(저장소)로부터 다운로드 후 빌드되어 Maven Dependencies(.m2.repository)에 저장된다.
   
		<!-- Mybatis 설정 시작 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.6</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>5.3.24</version>
		</dependency>
   
==================================================================

5. [CustomerController.java] 설정
    
	package com.spring.nardrak_mvc.controller;
	
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	
	
	@Controller
	public class CustomerController {
	
		private static final Logger logger = LoggerFactory.getLogger(CustomerController.class);
	
		// -------------------------[메인 화면]-------------------------
		@RequestMapping("main.do")
	    public String main() {
	        logger.info("<<< url ==>  /main.do >>>");
	        
	        return "common/main";
	     }
		
	}
	
==================================================================
6. [CustomerDAOImpl.java] 설정

	@Repository
	public class CustomerDAOImpl implements CustomerDAO {
		// 6-2)
		@Autowired
		private SqlSessionTemplate sqlSession;   // dataSource-config.xml - 컨넥션풀 + 마이바티스 설정(pom.xml)

   }
   
------------------------------------------------------------------
6-1) src/main/resources/dataSource-config.xml 설정
6-1-1) web.xml에 등록해야 함 
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/root-context.xml
			classpath:/dataSource-config.xml <!-- dataSource-config 등록 -->
		</param-value>
	</context-param>
	
6-1-2) src/main/resources/dataSource-config.xml 설정
-- src/main/resources/ 우클릭 > New > Spring Bean Configuration File > dataSource-config.xml
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
		   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
				
			<!-- Mybatis 설정 시작 -->
		    <!-- 컨넥션풀 -->
		    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		       <property name="jndiName" value="java:comp/env/jdbc/nardrak_spring_mvc" />
		       <property name="resourceRef" value="true" />
		    </bean>
		    
		    <!-- Mybatis 파일 위치 지정, 컨넥션풀 -->
		    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		       <property name="dataSource" ref="dataSource" />
		       <!-- src/main/resources/하위에 mappers 폴더 생성 -->
		       <!-- mappers/**/ 하위 폴더 어떤것도 가능함 -->
		       <property name="mapperLocations" value="classpath:mappers/**/*.xml" />  
		    </bean>
		    
		    <!-- 생성자 DI이며, sqlSession이 참조변수 -->
		    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		       <constructor-arg ref="sqlSessionFactory" />
		    </bean>
		
		</beans>
------------------------------------------------------------------
6-2) DAOImpl에 sqlSession 추가
   
   // Mybatis jar 파일들이 pom.xml에 등록되어 있어야 SqlSession이 import 가능
   // dataSource-config.xml에 bean id="sqlSession"로 설정되어 있어야 함
   
   @Autowired
   private SqlSessionTemplate sqlSession;   // dataSource-config.xml - 컨넥션풀 + 마이바티스 설정(pom.xml)

------------------------------------------------------------------ 
6-3) 마이바티스 매퍼 파일 작성   
     => 1. 한두줄의 자바코드로 DB연동을 처리한다
     => 2. SQL 명령어를 자바 코드에서 분리하여 XML 파일에 Mapper로 따로 관리
         
	- src/main/resources/에서 폴더 생성 : mappers 폴더 생성
	- 그 폴더 우클릭 > new > other > xml file > customerMapper.xml 생성
	  
	-  customerMapper.xml에 추가
	<?xml version="1.0" encoding="UTF-8"?>

	<!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
     
    <mapper namespace="com.spring.nardrak_mvc.dao.CustomerDAO">  <!-- namespace="패키지명.인터페이스" -->
   
    </mapper> 
   

 
 